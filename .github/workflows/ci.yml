name: CI/CD Pipeline

# Define when this workflow will run
on:
  push:
    branches: [main] # Run on pushes to main branch
  pull_request:
    branches: [main] # Run on PRs targeting main branch

# Define environment variables used across jobs
env:
  NODE_VERSION: "18" # Node.js version to use

# Define the jobs to run
jobs:
  # Lint job - checks code quality
  lint:
    name: Lint
    runs-on: ubuntu-latest # Use Ubuntu runner
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for SonarQube to analyze all history

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm" # Cache npm dependencies

      - name: Install dependencies
        run: npm ci # Clean install of dependencies

      - name: Run ESLint
        run: npm run lint # Run linting

  # Test job - runs unit and integration tests
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for SonarQube to analyze all history

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run Jest tests
        run: npm test

  # SonarQube analysis job
  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Build job - creates production build
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test, sonarqube] # Only run after lint, test, and sonarqube succeed
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-output
          path: .next
          retention-days: 7 # Keep artifacts for 7 days

  # Deploy job - deploys to Vercel
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build # Only run after build succeeds
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Only deploy on push to main
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-output
          path: .next

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: "--prod"
